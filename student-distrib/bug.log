<=========================================================>
<=================>    BUG LOG HEADER   <=================>
<=========================================================>
Assignment:
    MP3
CheckPoint:
    CP1
CreateTime:
    2024.3.12

<--------------------------------------------------------->
                          BUG 1                          
<--------------------------------------------------------->
Time:
    2024.3.12.
Creator:
    Tessa Samuels
Description:
    GDT does not work, boot loops
Solution:
    had to comment out launch_tests() in kernal.c

<--------------------------------------------------------->
                          BUG 2                          
<--------------------------------------------------------->
Time:
    2024.3.13.
Creator:
    Tessa Samuels
Description:
    stuck in boot loop, this is because IDT is not working
Solution:
    I was never actually initilizing my IDT in boot.S, just loading the register

<--------------------------------------------------------->
                          BUG 3                          
<--------------------------------------------------------->
Time:
    2024.3.13.
Creator:
    Tessa Samuels
Description:
    invalid magic number error, magic number is 0x004025F9, should be 0x2BADB002
Solution:
    i forgot to preserve the caller saved registers, once I did that it worked

<--------------------------------------------------------->
                          BUG 4                          
<--------------------------------------------------------->
Time:
    2024.3.13.
Creator:
    Tessa Samuels
Description:
    my divide error/divide by 0 test causes the OS to boot loop
Solution:
    i had the order of the reserved bits reveresed so my trap gate was not actually a trap gate

<--------------------------------------------------------->
                          BUG 5                          
<--------------------------------------------------------->
Time:
    2024.3.17.
Creator:
    Tessa Samuels
Description:
    when testing RTC test_debug just quits out, the print I have in my RTC handler only prints when there
    is a gdb breakpoint set for my RTC handler, but stepping through with GDB does not reveal any issues
Solution:
    i didn't have assembly linkage for my RTC header, once I had that it worked
    
<--------------------------------------------------------->
                          BUG 6                          
<--------------------------------------------------------->
Time:
    2024.3.17.
Creator:
    Tessa Samuels
Description:
    my ASM wrapper for linkage of RTC is not compiling, it says the name of linker is undefined even though it is globa
Solution:
    my linker.S file has a lowercase s and changing it to uppercase fixed it

<--------------------------------------------------------->
                          BUG 7                          
<--------------------------------------------------------->
Time:
    2024.3.17.
Creator:
    Elizabeth Shank
Description:
    Printing the keys to the screen would just print the same
    character over and over again. 
Solution:
    Was using a keyboard test that kept calling the keyboard
    interrupt over and over causing it to keep printing. 
    Nothing is needed in test.c to test the keyboard.

<--------------------------------------------------------->
                          BUG 8                          
<--------------------------------------------------------->
Time:
    2024.3.17.
Creator:
    Elizabeth Shank
Description:
    Echoed only one character then would stop working. 
Solution:
    send_eoi function needs to OR EOI (0x60) with the
    irq number when sending the command to slave/master.

<--------------------------------------------------------->
                          BUG 9                          
<--------------------------------------------------------->
Time:
    2024.3.18.
Creator:
    Elizabeth Shank
Description:
    Randomly causes page faults when echoing keyboard to
    the screen. 
Solution:
    The IDT was using the keyboard_handler function directly
    instead of the key_handler_linkage function. 

<--------------------------------------------------------->
                          BUG 10                          
<--------------------------------------------------------->
Time:
    2024.3.18.
Creator:
    Sairaj Shetye
Description:
    Enabling paging causes the OS to boot loop.
Solution:
    Forgot to shift the address by 12 for page directory
    entries in order to get the top 20 bits, since only
    the top 20 bits of the address are used in an entry's
    structure.

<--------------------------------------------------------->
                          BUG 11                         
<--------------------------------------------------------->
Time:
    2024.3.18.
Creator:
    Sairaj Shetye
Description:
    Page table entry structs and page directory entry structs
    are incorrectly constructed for 4mB entries.
Solution:
    Only page directory entries have separate 4kB and 4mB
    variants, with 4mB only having addresses take up the
    top 10 bits of a struct. Page table entry structs were
    changed to be the same, and page directory entry struct
    modified to account for 4mB entries for the kernel.

<--------------------------------------------------------->
                          BUG 12                         
<--------------------------------------------------------->
Time:
    2024.3.18.
Creator:
    Sairaj Shetye
Description:
    Pages have correct memory allocated when using info mem,
    but page faults are generated when trying to access the
    top 3 addresses of the kernel or video memory.
Solution:
    Used an int8_t instead of an int pointer to try 
    to access and write memory in testing. int pointers have
    an extra 3 bytes, unlike int8_t pointers which are a     
    singular byte.

